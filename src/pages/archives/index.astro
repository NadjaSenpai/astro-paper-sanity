---
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Layout from "@/layouts/Layout.astro";
import Main from "@/layouts/Main.astro";
import Card from "@/components/Card.astro";
import { getSiteConfig } from "@/lib/getSiteConfig";
import { getPostsByGroupCondition } from "@/lib/sanity/utils/getPostsByGroupCondition";

const site = await getSiteConfig();

// ✅ JSで配列をグループ化するユーティリティ関数
function groupBy<T>(array: T[], getKey: (item: T) => string | number) {
  return array.reduce((result, item) => {
    const key = getKey(item);
    (result[key] ||= []).push(item);
    return result;
  }, {} as Record<string, T[]>);
}

// ✅ 記事取得対象: "featured == true" な投稿だけ
const groupField = "featured";
const groupValue = true; // ← ✅ booleanで渡すのがポイント

if (!site.showArchives) {
  return Astro.redirect("/404");
}

const posts = await getPostsByGroupCondition("archived", true);

const months = [
  "January", "February", "March", "April", "May", "June",
  "July", "August", "September", "October", "November", "December",
];

// 年ごとのグループ化
const groupedByYear = groupBy(posts, post => new Date(post.pubDate).getFullYear());
---
<Layout title={`Archives | ${site.title}`}>
  <Header />
  <Main pageTitle="Archives" pageDesc="All the articles I've archived." data-layout="index">
    {
      Object.entries(groupedByYear)
        .sort(([a], [b]) => Number(b) - Number(a))
        .map(([year, yearGroup]) => {
          const groupedByMonth = groupBy(yearGroup, post => new Date(post.pubDate).getMonth() + 1);
          return (
            <div>
              <span class="text-2xl font-bold">{year}</span>
              <sup class="text-sm">{yearGroup.length}</sup>

              {
                Object.entries(groupedByMonth)
                  .sort(([a], [b]) => Number(b) - Number(a))
                  .map(([month, monthGroup]) => (
                    <div class="flex flex-col sm:flex-row">
                      <div class="mt-6 min-w-36 text-lg sm:my-6">
                        <span class="font-bold">{months[Number(month) - 1]}</span>
                        <sup class="text-xs">{monthGroup.length}</sup>
                      </div>
                      <ul>
                        {
                          monthGroup
                            .sort((a, b) =>
                              Math.floor(new Date(b.pubDate).getTime() / 1000) -
                              Math.floor(new Date(a.pubDate).getTime() / 1000)
                            )
                            .map(post => (
                              <Card
                                title={post.title}
                                description={post.description}
                                pubDate={post.pubDate}
                                modDate={post.modDate}
                                slug={post.slug}
                                tags={post.tags}
                              />
                            ))
                        }
                      </ul>
                    </div>
                  ))
              }
            </div>
          )
        })
    }
  </Main>
  <Footer />
</Layout>
