---
import PortableTextRenderer from "@/components/PortableTextRenderer.tsx";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Layout from "@/layouts/Layout.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import BackButton from "@/components/BackButton.astro";
import ShareLinks from "@/components/ShareLinks.astro";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import slugify from "@/utils/slugify";
import { getSiteConfig } from "@/lib/getSiteConfig";
import { getShareLinks } from "@/constants";
import { cleansePortableText } from "@/lib/sanity/utils/helpers";

const site = await getSiteConfig();
const SHARE_LINKS = getShareLinks(site);

const { post, posts } = Astro.props;
const { title, content, pubDate, modDate, tags = [] } = post;

const safeSlug = typeof post.slug === "string" ? post.slug : post.slug?.current ?? "";
const allPosts = Array.isArray(posts)
  ? posts.map(p => ({
      slug: typeof p.slug === "string" ? p.slug : p.slug?.current ?? "",
      title: p.title,
    }))
  : [];
const currentIndex = allPosts.findIndex(p => p.slug === safeSlug);
const prevPost = currentIndex > 0 ? allPosts[currentIndex - 1] : null;
const nextPost = currentIndex < allPosts.length - 1 ? allPosts[currentIndex + 1] : null;
---

<Layout>
  <Header />
  <BackButton />
  <main
    id="main-content"
    class:list={[ "mx-auto w-full max-w-3xl px-4 pb-12", { "mt-8": !site.showBackButton } ]}
    data-pagefind-body
  >
    <h1
      transition:name={slugify(title)}
      class="inline-block text-2xl font-bold text-accent sm:text-3xl"
    >
      {title}
    </h1>

    <div class="flex items-center gap-4 my-2">
      <Datetime pubDate={pubDate} modDate={modDate} timezone="Asia/Tokyo" />
    </div>

    <article class="mx-auto prose mt-8 max-w-3xl">
      <PortableTextRenderer client:load
        value={content}
      />
    </article>

    {Array.isArray(tags) && tags.length > 0 && (
      <ul class="mt-6 flex flex-wrap gap-3">
        {tags.map(tag => (
          <Tag tag={slugify(tag.slug?.current ?? tag.title)} tagName={tag.title} />
        ))}
      </ul>
    )}

    <hr class="my-8 border-dashed" />

    <div class="flex flex-col items-center justify-between gap-6 sm:flex-row sm:items-end sm:gap-4">
      <ShareLinks shareLinks={SHARE_LINKS} />

      <button id="back-to-top" class="focus-outline py-1 whitespace-nowrap hover:opacity-75">
        <IconChevronLeft class="inline-block rotate-90" />
        <span>Back to Top</span>
      </button>
    </div>

    <hr class="my-6 border-dashed" />

    <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      {prevPost && (
        <a href={`/posts/${prevPost.slug}`} class="flex w-full gap-1 hover:opacity-75">
          <IconChevronLeft class="inline-block flex-none" />
          <div>
            <span>Previous Post</span>
            <div class="text-sm text-accent/85">{prevPost.title}</div>
          </div>
        </a>
      )}
      {nextPost && (
        <a href={`/posts/${nextPost.slug}`} class="flex w-full justify-end gap-1 text-right hover:opacity-75 sm:col-start-2">
          <div>
            <span>Next Post</span>
            <div class="text-sm text-accent/85">{nextPost.title}</div>
          </div>
          <IconChevronRight class="inline-block flex-none" />
        </a>
      )}
    </div>
  </main>
  <Footer />
</Layout>

<script is:inline data-astro-rerun>
  /** Create a progress indicator
   *  at the top */
  function createProgressBar() {
    // Create the main container div
    const progressContainer = document.createElement("div");
    progressContainer.className =
      "progress-container fixed top-0 z-10 h-1 w-full bg-background";

    // Create the progress bar div
    const progressBar = document.createElement("div");
    progressBar.className = "progress-bar h-1 w-0 bg-accent";
    progressBar.id = "myBar";

    // Append the progress bar to the progress container
    progressContainer.appendChild(progressBar);

    // Append the progress container to the document body or any other desired parent element
    document.body.appendChild(progressContainer);
  }
  createProgressBar();

  /** Update the progress bar
   *  when user scrolls */
  function updateScrollProgress() {
    document.addEventListener("scroll", () => {
      const winScroll =
        document.body.scrollTop || document.documentElement.scrollTop;
      const height =
        document.documentElement.scrollHeight -
        document.documentElement.clientHeight;
      const scrolled = (winScroll / height) * 100;
      if (document) {
        const myBar = document.getElementById("myBar");
        if (myBar) {
          myBar.style.width = scrolled + "%";
        }
      }
    });
  }
  updateScrollProgress();

  /** Attaches links to headings in the document,
   *  allowing sharing of sections easily */
  function addHeadingLinks() {
    const headings = Array.from(
      document.querySelectorAll("h2, h3, h4, h5, h6")
    );
    for (const heading of headings) {
      heading.classList.add("group");
      const link = document.createElement("a");
      link.className =
        "heading-link ml-2 opacity-0 group-hover:opacity-100 focus:opacity-100";
      link.href = "#" + heading.id;

      const span = document.createElement("span");
      span.ariaHidden = "true";
      span.innerText = "#";
      link.appendChild(span);
      heading.appendChild(link);
    }
  }
  addHeadingLinks();

  /** Scrolls the document to the top when
   * the "Back to Top" button is clicked. */
  function backToTop() {
    document.querySelector("#back-to-top")?.addEventListener("click", () => {
      document.body.scrollTop = 0; // For Safari
      document.documentElement.scrollTop = 0; // For Chrome, Firefox, IE and Opera
    });
  }
  backToTop();

  /* Go to page start after page swap */
  document.addEventListener("astro:after-swap", () =>
    window.scrollTo({ left: 0, top: 0, behavior: "instant" })
  );
</script>