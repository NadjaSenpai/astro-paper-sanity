---
// src/layouts/PostDetails.astro

import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Layout from "@/layouts/Layout.astro";
import Tag from "@/components/Tag.astro";
import Datetime from "@/components/Datetime.astro";
import BackButton from "@/components/BackButton.astro";
import ShareLinks from "@/components/ShareLinks.astro";
import IconChevronLeft from "@/assets/icons/IconChevronLeft.svg";
import IconChevronRight from "@/assets/icons/IconChevronRight.svg";
import slugify from "@/utils/slugify";
import { getSiteConfig } from "@/lib/getSiteConfig";
import { getShareLinks } from "@/constants";
import { cleansePortableText } from "@/lib/sanity/utils/helpers";
import { ClientOnly } from "astro/components";
import PortableTextRendererSSR from "@/components/PortableTextRendererSSR";
import PortableTextRendererClient from "@/components/PortableTextRendererClient";

const site = await getSiteConfig();
const SHARE_LINKS = getShareLinks(site);

const { post, embedMap, posts, sortedPosts } = Astro.props;
const { title, content, pubDate, modDate, tags } = post;
// tags が null のときは [] にフォールバック
const safeTags = Array.isArray(tags) ? tags : [];

const safeSlug =
  typeof post.slug === "string"
    ? post.slug
    : post.slug?.current ?? "";

const allPosts = Array.isArray(posts)
  ? posts.map((p) => ({
      slug:
        typeof p.slug === "string"
          ? p.slug
          : p.slug?.current ?? "",
      title: p.title,
    }))
  : [];

const idx = allPosts.findIndex((p) => p.slug === safeSlug);
const prev = idx > 0 ? allPosts[idx - 1] : null;
const next = idx < allPosts.length - 1 ? allPosts[idx + 1] : null;

const blocks = cleansePortableText(post.content);
---

<Layout>
  <Header />
  <BackButton />

  <main
    id="main-content"
    class:list={[
      "mx-auto w-full max-w-3xl px-4 pb-12",
      { "mt-8": !site.showBackButton },
    ]}
    data-pagefind-body
  >
    <h1
      transition:name={slugify(title)}
      class="inline-block text-2xl font-bold text-accent sm:text-3xl"
    >
      {title}
    </h1>

    <div class="flex items-center gap-4 my-2">
      <Datetime pubDate={pubDate} modDate={modDate} timezone="Asia/Tokyo" />
    </div>

    <article class="mx-auto prose mt-8 max-w-3xl not-prose">
      <!-- クライアントマウント後にだけレンダリング -->
      <PortableTextRendererClient
        client:load
        value={blocks}
        embedMap={embedMap}
        headingLink
      />
    </article>

    <!-- 末尾にインライン JS 追加 -->

    {safeTags.length > 0 && (
      <ul class="mt-6 flex flex-wrap gap-3">
        {safeTags.map((t) => (
          <Tag
            tag={slugify(t.slug?.current ?? t.title)}
            tagName={t.title}
          />
        ))}
      </ul>
    )}

    <hr class="my-8 border-dashed" />

    <div class="flex flex-col items-center justify-between gap-6 sm:flex-row sm:items-end sm:gap-4">
      <ShareLinks shareLinks={SHARE_LINKS} />
      <button
        id="back-to-top"
        class="focus-outline py-1 whitespace-nowrap hover:opacity-75"
      >
        <IconChevronLeft class="inline-block rotate-90" />
        <span>Back to Top</span>
      </button>
    </div>

    <hr class="my-6 border-dashed" />

    <div class="grid grid-cols-1 gap-6 sm:grid-cols-2">
      {prev && (
        <a href={`/posts/${prev.slug}`} class="flex w-full gap-1 hover:opacity-75">
          <IconChevronLeft class="inline-block flex-none" />
          <div>
            <span>Previous Post</span>
            <div class="text-sm text-accent/85">{prev.title}</div>
          </div>
        </a>
      )}
      {next && (
        <a
          href={`/posts/${next.slug}`}
          class="flex w-full justify-end gap-1 text-right hover:opacity-75 sm:col-start-2"
        >
          <div>
            <span>Next Post</span>
            <div class="text-sm text-accent/85">{next.title}</div>
          </div>
          <IconChevronRight class="inline-block flex-none" />
        </a>
      )}
    </div>
  </main>
  <Footer />
</Layout>
