---
import dayjs from "dayjs";
import utc from "dayjs/plugin/utc";
import timezone from "dayjs/plugin/timezone";
import IconCalendar from "@/assets/icons/IconCalendar.svg";

dayjs.extend(utc);
dayjs.extend(timezone);

export interface Props {
  class?: string;
  size?: "sm" | "lg";
  timezone?: string; // ← 必須ではないが、明示的に渡せるように
  pubDate: string | Date;
  modDate?: string | Date | null;
}

const {
  pubDate,
  modDate,
  size = "sm",
  class: className = "",
  timezone: tz = "Asia/Tokyo", // ← siteなしでデフォルトを明示
} = Astro.props;

// 日付の妥当性を厳しくチェック
const isValidDate = (d: unknown): d is Date =>
  d instanceof Date && !isNaN(d.getTime());

const pub = pubDate instanceof Date ? pubDate : new Date(pubDate);
const mod = modDate
  ? modDate instanceof Date
    ? modDate
    : new Date(modDate)
  : null;

if (!isValidDate(pub)) {
  throw new Error("❌ pubDate が無効です: " + JSON.stringify(pubDate));
}

const datetime = mod && isValidDate(mod) && mod > pub ? mod : pub;
const formatted = dayjs(datetime).tz(tz);

const date = formatted.format("D MMM, YYYY");
const time = formatted.format("hh:mm A");
---

<div class:list={["flex items-end space-x-2 opacity-80", className]}>
  <IconCalendar
    class:list={[
      "inline-block size-6 min-w-[1.375rem]",
      { "scale-90": size === "sm" },
    ]}
  />
  {
    mod && isValidDate(mod) && mod > pub ? (
      <span class:list={["text-sm italic", { "sm:text-base": size === "lg" }]}>
        Updated:
      </span>
    ) : (
      <span class="sr-only">Published:</span>
    )
  }
  <span class:list={["text-sm italic", { "sm:text-base": size === "lg" }]}>
    <time datetime={formatted.toISOString()}>{date}</time>
    <span aria-hidden="true"> | </span>
    <span class="sr-only">&nbsp;at&nbsp;</span>
    <span class="text-nowrap">{time}</span>
  </span>
</div>
